{
  "name": "Podcast Inteligence",
  "nodes": [
    {
      "parameters": {
        "url": "https://itunes.apple.com/lookup",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "id",
              "value": "={{ $json.podcastId }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        80
      ],
      "id": "e6fdf8f2-5116-4a91-b0f3-9d0e9b63aeb9",
      "name": "iTunes Search API"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "rss-url",
              "name": "rssUrl",
              "value": "={{ JSON.parse($json.data).results[0].feedUrl }}",
              "type": "string"
            },
            {
              "id": "podcast-name",
              "name": "podcastName",
              "value": "={{ JSON.parse($json.data).results[0].collectionName }}",
              "type": "string"
            },
            {
              "id": "podcast-artist",
              "name": "podcastArtist",
              "value": "={{ JSON.parse($json.data).results[0].artistName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        940,
        80
      ],
      "id": "67711c4b-005a-4544-bc23-52a083b2a94d",
      "name": "Extract RSS URL"
    },
    {
      "parameters": {
        "url": "={{ $json.rssUrl }}",
        "options": {
          "timeout": 30000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1160,
        80
      ],
      "id": "1d5e4170-59ed-44b7-9424-5bc1a30eb267",
      "name": "Fetch RSS Feed"
    },
    {
      "parameters": {
        "jsCode": "// Get the XML content from the previous node\nconst xmlContent = $input.first().json.data || $input.first().json;\n\ntry {\n  // Simple regex parsing to extract episodes\n  const episodes = [];\n  \n  // Find all <item> blocks (episodes)\n  const itemMatches = xmlContent.match(/<item[^>]*>([\\s\\S]*?)<\\/item>/gi);\n  \n  if (!itemMatches) {\n    throw new Error('No episodes found in RSS feed');\n  }\n  \n  for (const itemContent of itemMatches) {\n    const episode = {};\n    \n    // Extract title\n    const titleMatch = itemContent.match(/<title[^>]*>([\\s\\S]*?)<\\/title>/i);\n    if (titleMatch) {\n      episode.title = titleMatch[1].replace(/<!?\\[CDATA\\[|\\]\\]>/g, '').trim();\n    }\n    \n    // Extract audio URL from enclosure\n    const enclosureMatch = itemContent.match(/<enclosure[^>]*url=[\"']([^\"']*)[\"'][^>]*>/i);\n    if (enclosureMatch) {\n      episode.audioUrl = enclosureMatch[1];\n    }\n    \n    // Extract description\n    const descMatch = itemContent.match(/<description[^>]*>([\\s\\S]*?)<\\/description>/i);\n    if (descMatch) {\n      episode.description = descMatch[1].replace(/<!?\\[CDATA\\[|\\]\\]>/g, '').replace(/<[^>]*>/g, '').trim();\n    }\n    \n    // Only add episodes that have both title and audio URL\n    if (episode.title && episode.audioUrl) {\n      episodes.push(episode);\n    }\n  }\n  \n  return [{ json: { episodes: episodes } }];\n  \n} catch (error) {\n  return [{ json: { error: error.message, rawXML: xmlContent } }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        80
      ],
      "id": "670fe440-8f53-4c91-9a17-7ba8f409641e",
      "name": "Parse RSS XML"
    },
    {
      "parameters": {
        "jsCode": "// Get the parsed RSS data\nconst data = $input.first().json;\n\n// Check if we have episodes\nif (!data.episodes || !Array.isArray(data.episodes)) {\n  return [{ json: { error: \"No episodes found in RSS feed\" } }];\n}\n\n// Get the episode title slug from Extract Input\nconst episodeTitleSlug = $('Extract Input2').first().json.episodeTitleSlug;\n\n// Convert slug to searchable terms\n// \"ceo-diaries-the-mistake-that-nearly-derailed-mrbeasts\" becomes search terms\nlet searchTerms = [];\nif (episodeTitleSlug) {\n  searchTerms = episodeTitleSlug.split('-').filter(term => term.length > 2);\n}\n\n// Find episode that matches the most search terms\nlet bestMatch = data.episodes[0]; // fallback to latest\nlet maxMatches = 0;\n\nfor (const episode of data.episodes) {\n  const title = episode.title.toLowerCase();\n  let matches = 0;\n  \n  for (const term of searchTerms) {\n    if (title.includes(term.toLowerCase())) {\n      matches++;\n    }\n  }\n  \n  if (matches > maxMatches) {\n    maxMatches = matches;\n    bestMatch = episode;\n  }\n}\n\nreturn [{\n  json: {\n    title: bestMatch.title,\n    audioUrl: bestMatch.audioUrl,\n    description: bestMatch.description || '',\n    searchTerms: searchTerms,\n    matchScore: maxMatches\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1600,
        80
      ],
      "id": "4c0bbf35-56db-4e71-8f39-07b741e6fcc8",
      "name": "Extract Episodes"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "transcript-text",
              "name": "transcript",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "episode-title",
              "name": "episodeTitle",
              "value": "={{ $('Extract Episodes').item.json.title }}",
              "type": "string"
            },
            {
              "id": "episode-description",
              "name": "episodeDescription",
              "value": "={{ $('Extract Episodes').item.json.description }}",
              "type": "string"
            },
            {
              "id": "podcast-name-final",
              "name": "podcastName",
              "value": "={{ $('Extract RSS URL').item.json.podcastName || $('Use Direct RSS').item.json.podcastName }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        980,
        320
      ],
      "id": "5a4681fb-beb7-49be-9c35-7aadd14bdec6",
      "name": "Prepare Analysis Data"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "business-analysis",
              "name": "businessAnalysis",
              "value": "={{ $json.message.content }}",
              "type": "string"
            },
            {
              "id": "analysis-timestamp",
              "name": "analysisTimestamp",
              "value": "={{ $now }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        720,
        580
      ],
      "id": "47821807-8710-4186-a855-09eefc43ad7b",
      "name": "Extract Analysis"
    },
    {
      "parameters": {
        "jsCode": "// Get the analysis data\nconst analysisData = $input.first().json;\nconst extractData = $('Extract Input2').first().json;\nconst episodeData = $('Extract Episodes').first().json;\n\n// Simple formatting - convert markdown to HTML\nlet formattedAnalysis = analysisData.businessAnalysis\n  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')  // Bold\n  .replace(/### (.*?)(\\n|$)/g, '<h3>$1</h3>')       // H3 headers\n  .replace(/## (.*?)(\\n|$)/g, '<h2>$1</h2>')        // H2 headers  \n  .replace(/^- (.*?)$/gm, '<li>$1</li>')            // List items\n  .replace(/(\\n|^)([A-Z][^:\\n]*):(\\n|$)/g, '<h4>$2</h4>') // Headers with colons\n  .replace(/\\n\\n/g, '</p><p>')                      // Paragraphs\n  .replace(/\\n/g, '<br>');                          // Line breaks\n\n// Wrap lists in UL tags\nformattedAnalysis = formattedAnalysis.replace(/(<li>.*?<\\/li>)/gs, '<ul>$1</ul>');\nformattedAnalysis = '<p>' + formattedAnalysis + '</p>';\n\nconst htmlReport = `\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>Podcast Business Ideas Report</title>\n    <style>\n        body { \n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; \n            line-height: 1.6; \n            color: #333; \n            max-width: 800px; \n            margin: 0 auto; \n            padding: 20px; \n            background: #f8f9fa; \n        }\n        .container { \n            background: white; \n            border-radius: 12px; \n            overflow: hidden; \n            box-shadow: 0 8px 32px rgba(0,0,0,0.1); \n        }\n        .header { \n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); \n            color: white; \n            padding: 40px 30px; \n            text-align: center; \n        }\n        .header h1 { \n            margin: 0; \n            font-size: 32px; \n            font-weight: 600; \n        }\n        .header p { \n            margin: 12px 0 0 0; \n            opacity: 0.9; \n            font-size: 16px; \n        }\n        .content { \n            padding: 30px; \n        }\n        .podcast-info { \n            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); \n            padding: 24px; \n            border-radius: 12px; \n            margin-bottom: 30px; \n            border-left: 5px solid #667eea; \n        }\n        .podcast-info h2 { \n            margin: 0 0 16px 0; \n            color: #667eea; \n            font-size: 20px; \n            font-weight: 600; \n        }\n        .podcast-info p { \n            margin: 8px 0; \n            color: #495057; \n        }\n        .analysis-content {\n            background: #f8f9fa;\n            padding: 30px;\n            border-radius: 12px;\n            border-left: 5px solid #28a745;\n        }\n        .analysis-content h2 { \n            color: #28a745; \n            font-size: 24px; \n            margin-top: 30px; \n            margin-bottom: 15px;\n            font-weight: 600;\n        }\n        .analysis-content h3 { \n            color: #495057; \n            font-size: 20px; \n            margin-top: 25px; \n            margin-bottom: 12px;\n            font-weight: 600;\n        }\n        .analysis-content h4 { \n            color: #667eea; \n            font-size: 16px; \n            margin-top: 20px; \n            margin-bottom: 8px;\n            font-weight: 600;\n        }\n        .analysis-content p { \n            margin: 15px 0; \n            line-height: 1.7; \n        }\n        .analysis-content ul { \n            margin: 15px 0; \n            padding-left: 20px; \n        }\n        .analysis-content li { \n            margin: 8px 0; \n            line-height: 1.6; \n        }\n        .analysis-content strong { \n            color: #333; \n            font-weight: 600; \n        }\n        .warning { \n            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%); \n            border: 1px solid #ffeaa7; \n            color: #856404; \n            padding: 20px; \n            border-radius: 12px; \n            margin: 30px 0; \n            text-align: center; \n        }\n        .footer { \n            text-align: center; \n            margin-top: 40px; \n            padding: 30px 0; \n            color: #6c757d; \n            border-top: 1px solid #e9ecef; \n        }\n        .apple-link { \n            color: #667eea; \n            text-decoration: none; \n            font-weight: 500; \n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🚀 Podcast Business Ideas Report</h1>\n            <p>AI-Powered Business Opportunity Analysis</p>\n        </div>\n        \n        <div class=\"content\">\n            <div class=\"podcast-info\">\n                <h2>📻 Episode Details</h2>\n                <p><strong>Episode:</strong> ${episodeData.title}</p>\n                <p><strong>Apple Podcast:</strong> <a href=\"${extractData.podcastInput}\" class=\"apple-link\">View Episode</a></p>\n                <p><strong>Description:</strong> ${episodeData.description.substring(0, 300)}${episodeData.description.length > 300 ? '...' : ''}</p>\n            </div>\n            \n            <div class=\"analysis-content\">\n                ${formattedAnalysis}\n            </div>\n            \n            <div class=\"warning\">\n                <strong>⚠️ Important:</strong> This analysis is AI-generated. Please conduct your own market research before pursuing any business ideas.\n            </div>\n            \n            <div class=\"footer\">\n                <p>Report generated on ${new Date(analysisData.analysisTimestamp).toLocaleString()}</p>\n                <p style=\"font-size: 12px; color: #adb5bd;\">Powered by AI Business Opportunity Analysis</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n`;\n\nreturn [{\n  json: {\n    htmlReport: htmlReport,\n    episodeTitle: episodeData.title,\n    userEmail: extractData.userEmail\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        580
      ],
      "id": "0dbfabc3-74f1-457b-9e0d-65698be2a465",
      "name": "Generate Report"
    },
    {
      "parameters": {
        "sendTo": "={{ $json.userEmail }}",
        "subject": "=Business Ideas from Podcast: {{ $('Prepare Analysis Data').item.json.podcastName }} - {{ $json.episodeTitle }}",
        "message": "={{ $json.htmlReport }}",
        "options": {
          "appendAttribution": false
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1160,
        580
      ],
      "id": "29626713-4022-44e4-bc91-ae97df46e583",
      "name": "Send Email Report",
      "webhookId": "b18f0c7c-8361-486b-8f4d-431cac619154",
      "credentials": {
        "gmailOAuth2": {
          "id": "xgw6hrNMWikaPudT",
          "name": "Gmail account 2"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-response",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "message-response",
              "name": "message",
              "value": "=Analysis complete! Business ideas report sent to {{ $('Generate Report').item.json.userEmail }}",
              "type": "string"
            },
            {
              "id": "podcast-analyzed",
              "name": "podcastAnalyzed",
              "value": "={{ $('Extract Episodes').item.json.title }}",
              "type": "string"
            },
            {
              "id": "episode-analyzed",
              "name": "episodeAnalyzed",
              "value": "={{ $('Generate Report').item.json.episodeTitle }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1380,
        580
      ],
      "id": "b783bb62-66a8-495a-8cf8-759aec6284ed",
      "name": "Success Response"
    },
    {
      "parameters": {
        "formTitle": "Get business ideas from a podcast URL",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Podcast URL",
              "requiredField": true
            },
            {
              "fieldLabel": "Email to send report",
              "fieldType": "email",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        280,
        80
      ],
      "id": "7ac8950b-34ee-4202-87b4-db5b32a17819",
      "name": "On form submission",
      "webhookId": "06aebe5a-3091-4988-aa2c-abdaf3d34309"
    },
    {
      "parameters": {
        "jsCode": "const formData = $input.first().json;\nconst url = formData[\"Podcast URL\"] || '';\n\n// Extract episode ID (after ?i=)\nlet episodeId = null;\nif (url.includes('?i=')) {\n  episodeId = url.split('?i=')[1];\n  if (episodeId.includes('&')) {\n    episodeId = episodeId.split('&')[0];\n  }\n}\n\n// Extract podcast ID (after /id)\nlet podcastId = null;\nconst idMatch = url.match(/\\/id(\\d+)/);\nif (idMatch) {\n  podcastId = idMatch[1];\n}\n\n// FIXED: Extract episode title slug from URL\nlet episodeTitleSlug = null;\n// URL format: .../podcast/EPISODE-SLUG/id123...\nconst episodeSlugMatch = url.match(/\\/podcast\\/([^\\/]+)\\/id\\d+/);\nif (episodeSlugMatch) {\n  episodeTitleSlug = episodeSlugMatch[1];\n}\n\nreturn [{\n  json: {\n    podcastInput: url,\n    userEmail: formData[\"Email to send report\"],\n    episodeId: episodeId,\n    podcastId: podcastId,\n    episodeTitleSlug: episodeTitleSlug,\n    episodeLimit: 1\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        80
      ],
      "id": "124db4a2-5b5b-4125-b0c3-f1fc57e3bb01",
      "name": "Extract Input2"
    },
    {
      "parameters": {
        "url": "={{ $json.audioUrl }}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 120000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        540,
        320
      ],
      "id": "b37697c2-70b1-4a83-a254-a4571478f5cd",
      "name": "Download Audio"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        760,
        320
      ],
      "id": "998b1776-5ba2-48d2-9813-4c5028ae3c0a",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "xWBo3lxuaOLZFvzv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "GPT-4.1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "You are a business opportunity analyst. Extract only the TOP 3-5 most actionable business ideas from this podcast transcript.\n\nFocus on:\n- Ideas that could realistically be started by a small team\n- Clear market problems with obvious solutions\n- Opportunities mentioned directly by the speakers\n\nFor each idea, provide:\n- **Business Idea**: One clear sentence\n- **Why Now**: Why this opportunity exists now  \n- **Target Customer**: Specific customer type\n- **Revenue Model**: How it makes money\n- **First Step**: One concrete action to validate/start\n\nKeep it concise - aim for 3-5 ideas maximum. Quality over quantity.",
              "role": "system"
            },
            {
              "content": "=Podcast Episode Transcript:\n\n{{ $json.transcript }}\n\nPlease analyze this transcript and provide a detailed business opportunities report."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        320,
        580
      ],
      "id": "21a95cd8-b369-4544-9920-71a0326b92c3",
      "name": "AI Business Analysis",
      "credentials": {
        "openAiApi": {
          "id": "xWBo3lxuaOLZFvzv",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Download audio + transcribe \nTo analyze the podcast we need \nto extract the transcript \nfrom the audio file to send to \nChat GPT. ",
        "height": 200,
        "width": 1780
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        280
      ],
      "id": "af70b30b-da40-487e-b922-94a72c8013bb",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Find podcast audio from RSS\nWe need to find the downloadable \naudio file from the RSS feed of \nthe podcast we want to analyze.",
        "height": 240,
        "width": 1780,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "77742bfa-d1bf-462d-93d4-b52b7cbdc7c9",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Generate report  \nTake the transcript and \npull out the gold from the\npodcast.\nFeel free to try your own\nprompts to look for the info\nbest suited to your needs.\n\n",
        "height": 220,
        "width": 1780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        520
      ],
      "id": "79be7539-6e37-4d0c-b228-b87e29a0fdc2",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "iTunes Search API": {
      "main": [
        [
          {
            "node": "Extract RSS URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract RSS URL": {
      "main": [
        [
          {
            "node": "Fetch RSS Feed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse RSS XML": {
      "main": [
        [
          {
            "node": "Extract Episodes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Episodes": {
      "main": [
        [
          {
            "node": "Download Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Analysis Data": {
      "main": [
        [
          {
            "node": "AI Business Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Analysis": {
      "main": [
        [
          {
            "node": "Generate Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Report": {
      "main": [
        [
          {
            "node": "Send Email Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Email Report": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract Input2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch RSS Feed": {
      "main": [
        [
          {
            "node": "Parse RSS XML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Input2": {
      "main": [
        [
          {
            "node": "iTunes Search API",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Audio": {
      "main": [
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Prepare Analysis Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Business Analysis": {
      "main": [
        [
          {
            "node": "Extract Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "db2ca3df-7b1a-48a4-b6d8-49f8d42f62a4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3d97c11d13a6ee9ddd7cacd6e138d7e1325f13550f81fd2a8861bee9e5e9317c"
  },
  "id": "cycGnk24BkY3I5Ih",
  "tags": []
}